name: JIRA Ticket Check

on:
  pull_request:
    branches: [ main ]
    types: [opened, edited, reopened, synchronize]

jobs:
  jira-ticket-check:
    runs-on: ubuntu-latest

    steps:
    - name: Extract first word from PR title (JIRA ticket)
      id: extract
      run: |
        title="${{ github.event.pull_request.title }}"
        ticket_id=$(echo "$title" | awk '{print $1}')
        echo "üí° Extracted ticket: $ticket_id"
        echo "ticket=$ticket_id" >> "$GITHUB_OUTPUT"

    - name: Validate ticket in JIRA
      id: verify
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}      # e.g. https://neuronote.atlassian.net
        JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
        JIRA_TOKEN:     ${{ secrets.JIRA_API_TOKEN }}
      run: |
        set -e
        ticket=${{ steps.extract.outputs.ticket }}
        if [[ -z "$ticket" ]]; then
          echo "ticket_valid=false" >> "$GITHUB_OUTPUT"
          echo "reason=No ticket ID found in title"   >> "$GITHUB_OUTPUT"
          exit 0
        fi

        api_url="$JIRA_BASE_URL/rest/api/3/issue/$ticket"
        echo "üîó Querying full URL (for debug): $api_url"

        # Corrected curl command:
        # -v sends verbose output to stderr (which GitHub Actions captures)
        # -s silences progress meter
        # -w "\n%{http_code}" prints HTTP code to stdout after body
        # 2>/dev/stderr explicitly sends verbose output to stderr
        http_code_and_body=$(curl -v -s -w "\n%{http_code}" \
          -u "$JIRA_EMAIL:$JIRA_TOKEN" \
          -H "Accept: application/json" "$api_url" 2>/dev/stderr)

        body=$(echo "$http_code_and_body" | head -n -1)
        code=$(echo "$http_code_and_body" | tail -n1)

        echo "--- Curl Response Body (parsed for jq) ---"
        echo "$body"
        echo "--- HTTP Code (parsed): $code ---"

        # Check for non-empty code to handle cases where curl fails completely
        if [[ -z "$code" ]]; then
          echo "ticket_valid=false"        >> "$GITHUB_OUTPUT"
          echo "reason=Curl command failed to produce an HTTP code. Check JIRA_BASE_URL secret or connectivity."   >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # If not 200 ‚Üí ticket missing or API error
        if [[ "$code" != "200" ]]; then
          echo "ticket_valid=false"        >> "$GITHUB_OUTPUT"
          echo "reason=Ticket not found or API error. HTTP Code: $code. Full response: $(echo "$body" | head -n 50 | tail -n +1)"   >> "$GITHUB_OUTPUT" # Limit body for comment
          exit 0
        fi

        status=$(echo "$body" | jq -r '.fields.status.name')
        echo "üìã Status: $status"

        allowed_status=("To Do" "In Progress" "In Review" "Testing")
        # Block if status is Done (or not in allowed list)
        if [[ "$status" == "Done" ]]; then
          echo "ticket_valid=false"        >> "$GITHUB_OUTPUT"
          echo "reason=Status is Done"     >> "$GITHUB_OUTPUT"
        elif [[ ! " ${allowed_status[*]} " =~ " $status " ]]; then
          echo "ticket_valid=false"        >> "$GITHUB_OUTPUT"
          echo "reason=Status $status not permitted" >> "$GITHUB_OUTPUT"
        else
          echo "ticket_valid=true"         >> "$GITHUB_OUTPUT"
          echo "reason=OK"                 >> "$GITHUB_OUTPUT"
        fi

    - name: Comment on PR if ticket invalid
      if: steps.verify.outputs.ticket_valid == 'false'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const ticket = '${{ steps.extract.outputs.ticket }}' || '(none)';
          const reason = '${{ steps.verify.outputs.reason }}';
          const body = `‚ùå **JIRA Check Failed**

          ‚Ä¢ Ticket: \`${ticket}\`
          ‚Ä¢ Reason: ${reason}

          Please ensure your PR title begins with a valid JIRA ID and that the issue is in an allowed state (not **Done**).`;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body
          });

    - name: Fail if ticket invalid
      if: steps.verify.outputs.ticket_valid == 'false'
      run: |
        echo "‚ùå JIRA validation failed ‚Äì blocking merge."
        exit 1